// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  emailVerifiedAt DateTime?
  password        String
  refreshToken    String?   @unique
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())

  Carts       Cart[]
  Products    Product[]
  Orders      Order[]
  UserVoucher UserVoucher[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       String
  stock       Int
  userId      Int

  CartItems CartItem[]
  Images    Image[]
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Cart {
  id      Int     @id @default(autoincrement())
  ordered Boolean @default(false)
  total   String  @default("0")

  userId   Int
  User     User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Order    Order?
  CartItem CartItem[]
}

model CartItem {
  id    Int    @id @default(autoincrement())
  qt    Int
  price String @default("0")

  cartId    Int
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Image {
  id        Int    @id @default(autoincrement())
  productId Int
  path      String

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id     Int    @id @default(autoincrement())
  total  String @default("0")
  status Status @default(PENDING)

  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int      @unique
  Cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voucherId Int?
  Voucher   Voucher? @relation(fields: [voucherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Voucher {
  id          Int     @id @default(autoincrement())
  code        String
  name        String
  description String?
  discount    Int

  UserVoucher UserVoucher[]
  Order       Order[]
}

model UserVoucher {
  id   Int     @id @default(autoincrement())
  used Boolean @default(false)

  userId    Int
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voucherId Int
  Voucher   Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PAID
  CANCELED
}
